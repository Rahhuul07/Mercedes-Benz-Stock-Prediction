# -*- coding: utf-8 -*-
"""Stock Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xxiBCEj7-mMALgF1QTxtSzhRhseIU_8u
"""

#libraries used
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import yfinance as yf

# Fetch the data
df = yf.download('MBG.DE', start='2010-03-24', end='2024-03-24')
df
hmc = yf.download('HMC', start='2010-03-24', end='2024-03-24')
pah3 = yf.download('PAH3.DE', start='2010-03-24', end='2024-03-24')
hymtf = yf.download('HYMTF', start='2010-03-24', end='2024-03-24')

# Fetch the data
df = yf.download('MBG.DE', start='2010-03-23', end='2024-03-23')
df

# Plot the data
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(df.index, df['Close'], label='mbg.de')
ax.plot(hmc.index, hmc['Close'], label='HMC')
ax.plot(pah3.index, pah3['Close'], label='PAH3.DE')
ax.plot(hymtf.index, hymtf['Close'], label='HYMTF')



# Add legend and labels
ax.legend(loc='upper left')
ax.set_xlabel('Date')
ax.set_ylabel('Stock Price')
ax.set_title('Stock Price of MBG and Competitors')

# Annotate the legend
legend = ax.legend(loc='upper left', bbox_to_anchor=(1.01, 1), borderaxespad=0)
legend_text = legend.get_texts()
legend_text[0].set_text('MBG.DE')
legend_text[1].set_text('HMC')
legend_text[2].set_text('PAH3.DE')
legend_text[3].set_text('HYMTF')



# Show the plot
plt.show()



#Number of rows and columns
df.shape



#visualize the closing history
plt.figure(figsize= (16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=20)
plt.ylabel('Close Price USD ($)',fontsize=20)
plt.show()

#create data frame with only "Close Column"
data = df.filter(['Close'])
#Convert the dataframe to a numpy array
dataset = data.values
#Get the number of rows to train the model on
training_data_len = math.ceil(len(dataset) * .8)
training_data_len

#Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#create the training data set
#create the scaled training data set
train_data = scaled_data[0:training_data_len,:]
#Split the data into x_train and y_train data sets

x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train),np.array(y_train)

#Reshape the data
x_train = np.reshape(x_train,(x_train.shape[0], x_train.shape[1],1))
x_train.shape

#Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

#Compile the model
model.compile(optimizer ='adam', loss = 'mean_squared_error')

#Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

# Create testing dataset
# Create new array containing scaled values from index
test_data = scaled_data[training_data_len - 60:,:]
# Create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i,0])

#Convert the data to a numpy array
x_test = np.array(x_test)

#Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))

#get the models predicted price models
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean((predictions - y_test)**2))
print("RMSE:",rmse)

# Mean Absolute Error (MAE)
mae = np.mean(np.abs(predictions - y_test))
print("MAE:", mae)

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize the model
plt.figure(figsize =(16,8) )
plt.title('MBG.DE Stock Price Prediction')
plt.xlabel('Time',fontsize = 18)
plt.ylabel('MBG.DE Stock Price USD $', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val','Predictions'],loc='lower right')
plt.show()





#Show the valid and predicted prices
valid

import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
import numpy as np

# Get the quote
mbg_quote = yf.download('MBG.DE', start='2014-01-01', end='2024-03-22')

# Create a new data frame
new_df = mbg_quote['Close']

# Get the last 30 days' closing price values
last_30_days = new_df.values[-30:]

# Create a scaler object
scaler = MinMaxScaler()

# Scale the data to be values between 0 and 1
last_30_days_scaled = scaler.fit_transform(last_30_days.reshape(-1, 1))

# Create an empty list
X_test = []

# Append the past 30 days
X_test.append(last_30_days_scaled)

# Convert X_test to a numpy array
X_test = np.array(X_test)

# Reshape data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Get the predicted, scaled price
pred_price = model.predict(X_test)

# Undo the scaling
pred_price = scaler.inverse_transform(pred_price)

print("Closing stock price on 23rd April,2024 is",pred_price)



